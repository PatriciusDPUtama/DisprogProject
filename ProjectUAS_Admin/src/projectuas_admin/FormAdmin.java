/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projectuas_admin;

/**
 *
 * @author ASUS1
 */

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class FormAdmin extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form FormAdmin
     */
    byte[] receiveData;
    byte[] sendData;   
    DatagramPacket incomingPacket,repliedPacket;
    DatagramSocket clientSocket;
    
//    Socket s;
//    Thread t;
//    BufferedReader in;
//    DataOutputStream out;
    
    ArrayList<Object> listOfUser = new ArrayList<Object>();
    public FormAdmin() {
        initComponents();
        try
        {
            clientSocket= new DatagramSocket(3320);
//            s = new Socket("localhost",4321);
//            if(t==null)
//            {
//                t = new Thread(this,"adminClient");
//                t.start();
//            }
        
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
    }
public String ReceiveMessage() throws IOException,SocketException
    {
        receiveData=new byte[2048];
        incomingPacket = new DatagramPacket(receiveData,receiveData.length);
        clientSocket.receive(incomingPacket);
        String received= new String(incomingPacket.getData(),incomingPacket.getOffset(), incomingPacket.getLength());
        return received;
//        String chatFromServer;
//        in = new BufferedReader(new InputStreamReader(s.getInputStream()));
//        chatFromServer = in.readLine();
//        textMessages.append(chatFromServer + "\n");
    }
    public void ReadMessage() throws IOException,SocketException
    {
        receiveData=new byte[2048];
        incomingPacket = new DatagramPacket(receiveData,receiveData.length);
        clientSocket.receive(incomingPacket);
        String received= new String(incomingPacket.getData(),incomingPacket.getOffset(), incomingPacket.getLength());
        textMessages.append(received);
//        String chatFromServer;
//        in = new BufferedReader(new InputStreamReader(s.getInputStream()));
//        chatFromServer = in.readLine();
//        textMessages.append(chatFromServer + "\n");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textMessages = new javax.swing.JTextArea();
        buttonBookings = new javax.swing.JButton();
        buttonRestaurant = new javax.swing.JButton();
        buttonCustomer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 400));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ADMINISTRATOR");

        textMessages.setColumns(20);
        textMessages.setRows(5);
        jScrollPane4.setViewportView(textMessages);

        buttonBookings.setText("Data of Bookings");
        buttonBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBookingsActionPerformed(evt);
            }
        });

        buttonRestaurant.setText("Data of Resgistered Restaurant");
        buttonRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRestaurantActionPerformed(evt);
            }
        });

        buttonCustomer.setText("Data of Customers");
        buttonCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCustomerActionPerformed(evt);
            }
        });

        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableData.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(buttonBookings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRestaurant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCustomer))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBookings)
                    .addComponent(buttonRestaurant)
                    .addComponent(buttonCustomer))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCustomerActionPerformed
        // TODO add your handling code here:
        textMessages.setText("");
        String[] columnNames = {"No", "Username", "Password", "Name"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        Object[] data = new Object[4];
        tableData.setModel(model);
        try{
           InetAddress ipServer= InetAddress.getByName("localhost");
           int portClient= 5320;
           String message = "user;-view";
           sendData = message.getBytes();
           repliedPacket= new DatagramPacket(sendData, sendData.length, ipServer,portClient );
           clientSocket.send(repliedPacket);
           String messageSplit[] = ReceiveMessage().split(" ");
           int numberOfItems = messageSplit.length;
           String numberOfUser = messageSplit[0];
           String dataNumber[];
           
           textMessages.append("Amount of Customers : " + numberOfUser + "\n");
           for (int i = 1; i <=numberOfItems; i++){
               String dataText = "";
               dataNumber = messageSplit[i].split("-");
               data[0] = i;
               for(int x = 0;x<dataNumber.length;x++)
               {
                   dataText += dataNumber[x] + " ";
                   data[x+1] = dataNumber[x];
               }
               model.addRow(data);
           }
           
        }
        catch(Exception ex)
        {
            
        }
    }//GEN-LAST:event_buttonCustomerActionPerformed

    private void buttonBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBookingsActionPerformed
        // TODO add your handling code here:
        textMessages.setText("");
        String[] columnNames = {"Id", "Customer", "Restaurant", "Number of People","Data and Time"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        Object[] data = new Object[5];
        tableData.setModel(model);
        try{
           InetAddress ipServer= InetAddress.getByName("localhost");
           int portClient= 5320;
           String message = "b;-view";
           sendData = message.getBytes();
           repliedPacket= new DatagramPacket(sendData, sendData.length, ipServer,portClient );
           clientSocket.send(repliedPacket);
           String messageSplit[] = ReceiveMessage().split("&");
           int numberOfItems = messageSplit.length;
           String numberOfUser = messageSplit[0];
           String dataNumber[];
           
           textMessages.append("Amount of Bookings : " + numberOfUser + "\n");
           for (int i = 1; i <=numberOfItems; i++){
               String dataText = "";
               dataNumber = messageSplit[i].split(";");
               data[0] = i;
               for(int x = 0;x<dataNumber.length;x++)
               {
                   dataText += dataNumber[x] + " ";
                   data[x+1] = dataNumber[x];
               }
               model.addRow(data);
           }
           
        }
        catch(Exception ex)
        {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_buttonBookingsActionPerformed

    private void buttonRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRestaurantActionPerformed
        // TODO add your handling code here:
        textMessages.setText("");
        String[] columnNames = {"Id", "Restaurant Name", "Restaurant Owner", "Number of Seats","Username","Password"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        Object[] data = new Object[6];
        tableData.setModel(model);
        try{
           InetAddress ipServer= InetAddress.getByName("localhost");
           int portClient= 5320;
           String message = "restaurant;-view";
           sendData = message.getBytes();
           repliedPacket= new DatagramPacket(sendData, sendData.length, ipServer,portClient );
           clientSocket.send(repliedPacket);
           String messageSplit[] = ReceiveMessage().split(" ");
           int numberOfItems = messageSplit.length;
           String numberOfUser = messageSplit[0];
           String dataNumber[];
           
           textMessages.append("Amount of Restaurant : " + numberOfUser + "\n");
           for (int i = 1; i <=numberOfItems; i++){
               String dataText = "";
               System.out.println("in for");
               dataNumber = messageSplit[i].split("-");
               data[0] = i;
               for(int x = 0;x<dataNumber.length;x++)
               {
                   System.out.println(dataNumber[x]);
                   dataText += dataNumber[x].toString() + " ";
                   data[x+1] = dataNumber[x];
               }
               System.out.println(dataText);
               model.addRow(data);
           }
           
        }
        catch(Exception ex)
        {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_buttonRestaurantActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBookings;
    private javax.swing.JButton buttonCustomer;
    private javax.swing.JButton buttonRestaurant;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tableData;
    private javax.swing.JTextArea textMessages;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true)
        {
            try
            {
                ReadMessage();
            }
            catch(Exception ex)
            {
                System.out.println(ex);
            }
        }
    }
}
